{"version":3,"sources":["spacex-logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","isMission","classNames","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","launches","map","key","LAUNCH_QUERY","Launch","props","flightNumber","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8825919.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex-logo.37a39b35.png\";","import React from 'react'\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n    const isMission = classNames({\n        'text-success': launch_success,\n        'text-danger': !launch_success\n    });\n\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: {' '}\n                        <span className={isMission}>{ mission_name }</span>\n                    </h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport gql from 'graphql-tag'; // apollo-boost 쓰면 bind 오류나므로 graphql-tag를 사용 필수\nimport { useQuery } from '@apollo/react-hooks';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n    {\n        launches {\n            flight_number,\n            launch_year,\n            launch_success,\n            launch_date_local,\n            mission_name,\n        }\n    }\n`;\n\nexport default function Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    if(error) console.error(error);\n\n    return (\n        <>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n            <MissionKey />\n            {\n                loading ? <h4>Loading...</h4> : \n                data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                ))\n            }\n        </>\n    )\n}\n","import React from 'react'\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\n\n\nconst LAUNCH_QUERY = gql`\n    query Launch($flightNumber: Int!) {\n        launch(flight_number: $flightNumber) {\n            flight_number,\n            mission_name,\n            launch_year,\n            launch_success,\n            launch_date_local,\n            rocket {\n                rocket_id,\n                rocket_name,\n                rocket_type\n            }\n        }\n    }\n`\n\nexport default function Launch(props) {\n    let { flightNumber } = props.match.params;\n    flightNumber = parseInt(flightNumber);\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n        variables: { flightNumber },\n    });\n    if(error) console.error(error);\n    const {flight_number, mission_name, launch_year, launch_success, launch_date_local} = (loading || data.launch);\n    const {rocket_id, rocket_name, rocket_type} = (loading || data.launch.rocket);\n    const isMission = classNames({\n        'text-success': launch_success,\n        'text-danger': !launch_success\n    });\n\n    return (\n        <>\n            <h1 className=\"display-4 my-3\">\n                <span className=\"text-dark\">Mission:</span>{' '}{ loading || mission_name }\n            </h1>\n            <div>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                {\n                    loading ? <div>Loading...</div> :\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">Flight Number: { flight_number }</li>\n                        <li className=\"list-group-item\">Launch Year: { launch_year }</li>\n                        <li className=\"list-group-item\">Launch Successful: <span className={ isMission }>{ launch_success ? 'Yes' : 'No' }</span></li>\n                        <li className=\"list-group-item\">Launch Date: <Moment format='YYYY-MM-DD HH:mm'>{ launch_date_local }</Moment></li>\n                    </ul>\n                }\n                <h4 className=\"my-3\">Rocket Details</h4>\n                {\n                    loading ? <div>Loading...</div> :\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">Rocket ID: { rocket_id }</li>\n                        <li className=\"list-group-item\">Rocket Name: { rocket_name }</li>\n                        <li className=\"list-group-item\">Rocket Type: { rocket_type }</li>\n                    </ul>\n                }\n            </div>\n            <hr />\n            <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n        </>\n    )\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nimport './App.css';\nimport logo from './spacex-logo.png';\n\nconst client = new ApolloClient({\n  uri: 'http://127.0.0.1:5000/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flightNumber\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}